-----------------------------------------------------------------------------
-- |
-- Module      : Language.Sill.Parser.Token
-- Description : Tokens generated by the lexer
-- Maintainer  : coskuacay@gmail.com
-- Stability   : experimental
-----------------------------------------------------------------------------
module Language.Sill.Parser.Token
  ( Token (..)
  , Lexeme (..)
  , token
  ) where

import Language.Sill.Parser.Location (SrcSpan, Located(..))


data Token =
  -- Keywords
    TModule
  | TData
  | TType
  | TInfix
  | TLet
  | TIn
  | TWhere
  | TDo
  | TCase
  | TOf

  -- Special Symbols
  | TOpenParen
  | TCloseParen
  | TOpenBrace
  | TCloseBrace
  | TSemi
  | TOpenVirtualBrace
  | TCloseVirtualBrace
  | TVirtualSemi
  | TDot
  | TComma
  | TWild

  -- Reserved Symbols
  | TEqual
  | TBar
  | TColon
  | TRightArrow
  | TLeftArrow
  | TLam

  | TUnit
  | TTensor
  | TInternal
  | TLolli
  | TExternal
  | TIntersect
  | TUnion

  | TClose
  | TWait
  | TSend
  | TRecv

  -- Literals
  | TChar Char
  | TString String
  | TNatural Integer
  | TInteger Integer
  | TRational Double -- TODO: Use something that does not lose precision

  -- Identifiers
  | TIdent String
  | TChannel String

  -- Mixfix operators
  | TMixfixPart String
  | TPreHole
  | TInHole
  | TPostHole

  -- Lexing and parsing
  | TEof
  deriving (Eq, Ord, Show)


data Lexeme = Lexeme SrcSpan Token

token :: Lexeme -> Token
token (Lexeme _ t) = t

instance Located Lexeme where
  location (Lexeme s _) = s

